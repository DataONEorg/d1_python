#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This work was created by participants in the DataONE project, and is
# jointly copyrighted by participating institutions in DataONE. For
# more information on DataONE, see our web site at http://dataone.org.
#
#   Copyright 2009-2016 DataONE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Generate random SystemMetadata
"""

from __future__ import absolute_import

import os
import random
import logging

import d1_common.checksum
import d1_common.types.dataoneTypes_v2_0 as v2

import d1_test.instance_generator.dates as dates
import d1_test.instance_generator.checksum as checksum_generator
import d1_test.instance_generator.identifier as identifier
import d1_test.instance_generator.random_data as random_data
import d1_test.instance_generator.access_policy as access_policy
import d1_test.instance_generator.replication_policy as replication_policy


def generate(options=None, bindings=v2):
  """Generate a random System Metadata object.

  {options} is a set of key-value pairs that allow the caller to prevent
  specific sections of the System Metadata from being randomly generated by
  providing previously created objects of the appropriate types.

  E.g., providing an Identifier object in options['identifier'] causes that
  object to be used and prevents a randomly generated Identifier from being
  used.
  """
  options = options or {}

  sysmeta_pyxb = bindings.systemMetadata()
  sysmeta_pyxb.serialVersion = random.randint(1, 100)
  sysmeta_pyxb.identifier = options.get(
    'identifier', identifier.generate(prefix='id_')
  )
  sysmeta_pyxb.dateUploaded = options.get('dateUploaded', dates.now())
  sysmeta_pyxb.formatId = options.get('formatId', 'application/octet-stream')
  sysmeta_pyxb.checksum = options.get('checksum', checksum_generator.generate())
  sysmeta_pyxb.size = options.get('size', random.randint(1, 1024**4))
  sysmeta_pyxb.submitter = options.get(
    'submitter', u'submitter_' + random_data.random_3_words()
  )
  sysmeta_pyxb.rightsHolder = options.get(
    'rightsHolder', u'rightsHolder_' + random_data.random_3_words()
  )
  sysmeta_pyxb.originMemberNode = options.get(
    'originMemberNode',
    u'originMemberNode_' + random_data.random_unicode_string_no_whitespace()
  )
  sysmeta_pyxb.authoritativeMemberNode = options.get(
    'authoritativeMemberNode', u'authoritativeMemberNode_' +
    random_data.random_unicode_string_no_whitespace()
  )
  sysmeta_pyxb.accessPolicy = options.get(
    'accessPolicy',
    access_policy.generate(min_rules=1, max_rules=5, max_subjects=5)
  )
  sysmeta_pyxb.replicationPolicy = options.get(
    'replicationPolicy', replication_policy.generate()
  )
  sysmeta_pyxb.dateSysMetadataModified = options.get(
    'dateSysMetadataModified', dates.now()
  )
  logging.debug(str(sysmeta_pyxb.checksum.value()))
  return sysmeta_pyxb


def generate_from_flo(flo, options=None):
  options = options or {}
  options['checksum'
          ] = d1_common.checksum.create_checksum_object_from_stream(flo)
  flo.seek(0, os.SEEK_END)
  options['size'] = flo.tell()
  return generate(options)


def generate_from_file(path, options=None):
  f = open(path, 'rb')
  return generate_from_flo(f, options)
