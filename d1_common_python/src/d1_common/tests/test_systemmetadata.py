#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This work was created by participants in the DataONE project, and is
# jointly copyrighted by participating institutions in DataONE. For
# more information on DataONE, see our web site at http://dataone.org.
#
#   Copyright 2009-2016 DataONE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Module d1_common.tests.test_systemmetadata
==========================================

Unit tests for serialization and de-serialization of the SystemMetadata type.

:Created: 2010-06-29
:Author: DataONE (Vieglais, Dahl)
:Dependencies:
  - python 2.6
"""

# Stdlib
import logging
import unittest

# 3rd party
import pyxb

# D1
import d1_common.types.dataoneTypes as dataoneTypes


EG_SYSMETA = u"""<?xml version="1.0" encoding="UTF-8"?>
<d1:systemMetadata xmlns:d1="http://ns.dataone.org/service/types/v1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://ns.dataone.org/service/types/v1 file:/home/roger/eclipse_workspace_d1/d1_common_python/src/d1_schemas/dataoneTypes.xsd">
    <serialVersion>50</serialVersion>
    <identifier>identifier0</identifier>
    <formatId>formatId0</formatId>
    <size>50</size>
    <checksum algorithm="algorithm0">checksum0</checksum>
    <submitter>submitter0</submitter>
    <rightsHolder>rightsHolder0</rightsHolder>
    <accessPolicy>
        <allow>
            <subject>subject0</subject>
            <subject>subject1</subject>
            <permission>read</permission>
            <permission>read</permission>
        </allow>
        <allow>
            <subject>subject2</subject>
            <subject>subject3</subject>
            <permission>read</permission>
            <permission>read</permission>
        </allow>
    </accessPolicy>
    <replicationPolicy replicationAllowed="false" numberReplicas="0">
        <preferredMemberNode>preferredMemberNode0</preferredMemberNode>
        <preferredMemberNode>preferredMemberNode1</preferredMemberNode>
        <blockedMemberNode>blockedMemberNode0</blockedMemberNode>
        <blockedMemberNode>blockedMemberNode1</blockedMemberNode>
    </replicationPolicy>
    <obsoletes>obsoletes0</obsoletes>
    <obsoletedBy>obsoletedBy0</obsoletedBy>
    <dateUploaded>2006-05-04T18:13:51.0Z</dateUploaded>
    <dateSysMetadataModified>2006-05-04T18:13:51.0Z</dateSysMetadataModified>
    <originMemberNode>originMemberNode0</originMemberNode>
    <authoritativeMemberNode>authoritativeMemberNode0</authoritativeMemberNode>
    <replica>
        <replicaMemberNode>replicaMemberNode0</replicaMemberNode>
        <replicationStatus>queued</replicationStatus>
        <replicaVerified>2006-05-04T18:13:51.0Z</replicaVerified>
    </replica>
    <replica>
        <replicaMemberNode>replicaMemberNode1</replicaMemberNode>
        <replicationStatus>queued</replicationStatus>
        <replicaVerified>2006-05-04T18:13:51.0Z</replicaVerified>
    </replica>
</d1:systemMetadata>
"""

EG_BAD_SYSMETA = u"""<?xml version="1.0" encoding="UTF-8"?>
<d1:systemMetadata xmlns:d1="http://ns.dataone.org/service/types/v1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://ns.dataone.org/service/types/v1 https://repository.dataone.org/software/cicore/tags/D1_SCHEMA_0_6_3/dataoneTypes.xsd">
    <!-- This instance document was auto generated by oXygen XML for testing purposes.
         It contains no useful information.
    -->
    <!-- <identifier>Identifier0</identifier> -->
    <objectFormat>eml://ecoinformatics.org/eml-2.0.1</objectFormat>
    <size>0</size>
    <submitter>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</submitter>
    <rightsHolder>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</rightsHolder>
    <obsoletes>Obsoletes0</obsoletes>
    <obsoletes>Obsoletes1</obsoletes>
    <obsoletedBy>ObsoletedBy0</obsoletedBy>
    <obsoletedBy>ObsoletedBy1</obsoletedBy>
    <derivedFrom>DerivedFrom0</derivedFrom>
    <derivedFrom>DerivedFrom1</derivedFrom>
    <describes>Describes0</describes>
    <describes>Describes1</describes>
    <describedBy>DescribedBy0</describedBy>
    <describedBy>DescribedBy1</describedBy>
    <checksum algorithm="SHA-1">2e01e17467891f7c933dbaa00e1459d23db3fe4f</checksum>
    <embargoExpires>2006-05-04T18:13:51.0Z</embargoExpires>
    <accessRule rule="allow" service="read"/>
    <accessRule rule="allow" service="read" subject="Subject1"/>
    <replicationPolicy replicationAllowed="true" numberReplicas="2">
        <preferredMemberNode>MemberNode12</preferredMemberNode>
        <preferredMemberNode>MemberNode13</preferredMemberNode>
        <blockedMemberNode>MemberNode6</blockedMemberNode>
        <blockedMemberNode>MemberNode7</blockedMemberNode>
    </replicationPolicy>
    <dateUploaded>2006-05-04T18:13:51.0Z</dateUploaded>
    <dateSysMetadataModified>2006-05-04T18:13:51.0Z</dateSysMetadataModified>
    <originMemberNode>OriginMemberNode0</originMemberNode>
    <authoritativeMemberNode>AuthoritativeMemberNode0</authoritativeMemberNode>
    <replica>
        <replicaMemberNode>ReplicaMemberNode0</replicaMemberNode>
        <replicationStatus>queued</replicationStatus>
        <replicaVerified>2006-05-04T18:13:51.0Z</replicaVerified>
    </replica>
    <replica>
        <replicaMemberNode>ReplicaMemberNode1</replicaMemberNode>
        <replicationStatus>queued</replicationStatus>
        <replicaVerified>2006-05-04T18:13:51.0Z</replicaVerified>
    </replica>
</d1:systemMetadata>
"""


class TestSystemMetadata(unittest.TestCase):
  def testLoadSystemMetadata(self):
    sysm = dataoneTypes.CreateFromDocument(EG_SYSMETA)
    self.assertEqual(sysm.identifier.value(), 'identifier0')
    self.assertEqual(sysm.size, 50)
    self.assertEqual(sysm.checksum.algorithm, 'algorithm0')
    self.assertEqual(sysm.checksum.value(), 'checksum0')
    rep = sysm.replica
    self.assertEqual(len(rep), 2)
    self.assertEqual(rep[1].replicationStatus, 'queued')
    try:
      bogus = sysm.thisDoesntExist
    except Exception, e:
      pass
    self.assertTrue(isinstance(e, AttributeError))

  def testValidateSystemMetadata(self):
    # Try loading a bad document with validation turned on.
    # Should fail with a PyXBException.
    pyxb.RequireValidWhenParsing(True)
    try:
      sysm = dataoneTypes.CreateFromDocument(EG_BAD_SYSMETA)
    except pyxb.PyXBException, e:
      logging.debug(repr(e))
    else:
      self.assertFalse(True)
