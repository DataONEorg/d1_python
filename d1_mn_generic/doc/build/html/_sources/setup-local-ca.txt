Setting up a local CA
=====================

These instructions describe how to:

* Set up a local CA
* Create a local CA root certificate
* Create a client side certificate signed by the local CA
* Set GMN up to trust the local CA root certificate
* Use the client side certificate to connect to the GMN instance

See :doc:`use` for the rationale for setting up a local CA.

No background information is provided in these instructions, as such information
is readily available on the web. See for instance,
`SSL Certificates HOWTO <http://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/x120.html>`_.

Prepare for setting up a local CA::

  $ cd /usr/lib/ssl/misc/
  $ sudo pico CA.pl

* Comment out the existing line starting with ``$SSLEAY_CONFIG`` by putting a
  hash mark ("#") in front of it. Then, add this line::

  $SSLEAY_CONFIG="-config /etc/ssl/local_ca/openssl.cnf";

* Change ``$CATOP`` to ``"/etc/ssl/local_ca";``
* Optionally, change ``$DAYS`` to ``3650`` (signed certs are valid for 10 years)
* Optionally, change ``$CADAYS`` to ``10950`` (the CA is valid for 30 years)


Set up work area for local CA::

  $ sudo mkdir /etc/ssl/local_ca
  $ cd /etc/ssl/local_ca

Set up a new openssl.cnf file for the local CA::

  $ sudo cp ../openssl.cnf .

Modify openssl.cnf to use the local_ca work area::

  $ sudo pico openssl.cnf

* Change ``dir`` (under ``CA_default``) to ``/etc/ssl/local_ca``.

Make the CA utilities more easily accessible::

  $ sudo ln -s /usr/lib/ssl/misc/* /usr/local/bin/

Create the local CA::

  $ sudo echo 01 | sudo tee serial > /dev/null
  $ sudo CA.pl -newca

* For the common Name (CN) use something like "Local CA root".

Create a client side certificate signed by the local CA::

  $ sudo CA.pl -newcert

* For the common Name (CN) use something like "Local client side certificate".

You now have a local CA root certificate and a certificate signed by that root:

| ``cacert.pem``: The local CA root cert
| ``private/cakey.pem``: The local CA root cert private key
| ``newcert.pem``: The local client side certificate
| ``newkey.pem``: The local client side certificate private key

Ensure that the GMN certificate chain ends with a linefeed::

  $ sudo sed -i -e '$a\' /var/local/dataone/certs/ca/cilogon_dataone_ca_chain.crt

Add the local CA to the CAs trusted by GMN::

  $ sudo cat cacert.pem >> /var/local/dataone/certs/ca/cilogon_dataone_ca_chain.crt


Extra steps for a stand-alone test instance
-------------------------------------------

If you are setting up a stand-alone test instance of GMN (see
:doc:`setup-local`), client side certificates have not been obtained from
DataONE. Instead, the local client side certificates that were just generated
serve that role.

Copy the local client side certificates to the GMN standard locations::

  $ sudo mkdir -p /var/local/dataone/certs/client
  $ sudo cp newcert.pem /var/local/dataone/certs/client/client.crt
  $ sudo cp newkey.pem /var/local/dataone/certs/client/client.key

For test instances of GMN, a server side certificate may not exist. If so, the
self signed "snakeoil" certificate that is automatically generated by Ubuntu can
be used (though it is not trusted by browsers):

Copy the snakeoil server side certificates to the GMN standard locations::

  $ sudo mkdir -p /var/local/dataone/certs/server
  $ sudo cp /etc/ssl/certs/ssl-cert-snakeoil.pem /var/local/dataone/certs/server/server.crt
  $ sudo cp /etc/ssl/private/ssl-cert-snakeoil.key /var/local/dataone/certs/server/server.nopassword.key

If the IP address or name of the server is changed, the snakeoil certificates
can be regenerated with::

  $ sudo make-ssl-cert generate-default-snakeoil --force-overwrite

  * Then, copy the new versions to the GMN standard locations as described
    above.
